{"ast":null,"code":"import { state } from '../../data/dummy';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/table\";\nimport * as i2 from \"@angular/material/button\";\n\nfunction GamegridComponent_th_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" No. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GamegridComponent_td_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const player_r10 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", player_r10.position + 1, \" \");\n  }\n}\n\nfunction GamegridComponent_th_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Name \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GamegridComponent_td_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const player_r11 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", player_r11.name, \" \");\n  }\n}\n\nfunction GamegridComponent_th_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Score \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GamegridComponent_td_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"td\", 12)(1, \"input\", 13);\n    i0.ɵɵlistener(\"change\", function GamegridComponent_td_11_Template_input_change_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const i_r13 = restoredCtx.index;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.saveScore($event, i_r13));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const player_r12 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", player_r12.score);\n    i0.ɵɵpropertyInterpolate(\"value\", player_r12.score);\n  }\n}\n\nfunction GamegridComponent_th_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Total \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GamegridComponent_td_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const player_r16 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", player_r16.total, \"\");\n  }\n}\n\nfunction GamegridComponent_tr_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 14);\n  }\n}\n\nfunction GamegridComponent_tr_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 15);\n  }\n}\n\nexport class GamegridComponent {\n  constructor() {\n    this.gameState = state;\n    this.displayedColumns = ['position', 'name', 'score', 'total'];\n  }\n\n  ngOnInit() {}\n\n  saveScore(event, index) {\n    if (event.target && event.target.value) {\n      this.addScoreToTotal(index, parseInt(event.target.value));\n    }\n  }\n\n  addScoreToTotal(id, score) {\n    let state = this.gameState;\n    state.currentPlayer = id;\n    let player = state.players.find(p => p.id === id);\n\n    if (player) {\n      player.score = score;\n      player.total = player.total + score;\n    }\n\n    this.gameState = state;\n  }\n\n  onNextRound() {\n    let state = this.gameState; // Add round to each player\n\n    state.players.forEach(player => player.currentRound = player.currentRound + 1); // Calculate positions\n\n    let orderedPlayers = state.players.sort((a, b) => {\n      if (a.total > b.total) return -1;else if (a.total < b.total) return 1;else return 0;\n    });\n    console.log(orderedPlayers);\n    state.players.forEach(player => player.position = orderedPlayers.findIndex(p => p.name === player.name)); ///console.log(state);\n    // Persist\n  }\n\n}\n\nGamegridComponent.ɵfac = function GamegridComponent_Factory(t) {\n  return new (t || GamegridComponent)();\n};\n\nGamegridComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GamegridComponent,\n  selectors: [[\"app-gamegrid\"]],\n  decls: 20,\n  vars: 4,\n  consts: [[\"mat-table\", \"\", 3, \"dataSource\"], [\"matColumnDef\", \"position\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"name\"], [\"matColumnDef\", \"score\"], [\"matColumnDef\", \"total\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [1, \"next-round-button-container\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"], [\"matInput\", \"\", \"type\", \"number\", 3, \"placeholder\", \"value\", \"change\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n  template: function GamegridComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"table\", 0);\n      i0.ɵɵelementContainerStart(3, 1);\n      i0.ɵɵtemplate(4, GamegridComponent_th_4_Template, 2, 0, \"th\", 2);\n      i0.ɵɵtemplate(5, GamegridComponent_td_5_Template, 2, 1, \"td\", 3);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(6, 4);\n      i0.ɵɵtemplate(7, GamegridComponent_th_7_Template, 2, 0, \"th\", 2);\n      i0.ɵɵtemplate(8, GamegridComponent_td_8_Template, 2, 1, \"td\", 3);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(9, 5);\n      i0.ɵɵtemplate(10, GamegridComponent_th_10_Template, 2, 0, \"th\", 2);\n      i0.ɵɵtemplate(11, GamegridComponent_td_11_Template, 2, 2, \"td\", 3);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(12, 6);\n      i0.ɵɵtemplate(13, GamegridComponent_th_13_Template, 2, 0, \"th\", 2);\n      i0.ɵɵtemplate(14, GamegridComponent_td_14_Template, 2, 1, \"td\", 3);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵtemplate(15, GamegridComponent_tr_15_Template, 1, 0, \"tr\", 7);\n      i0.ɵɵtemplate(16, GamegridComponent_tr_16_Template, 1, 0, \"tr\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"div\", 9)(18, \"button\", 10);\n      i0.ɵɵlistener(\"click\", function GamegridComponent_Template_button_click_18_listener() {\n        return ctx.onNextRound();\n      });\n      i0.ɵɵtext(19, \"Next round\");\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.gameState.title);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"dataSource\", ctx.gameState.players);\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n    }\n  },\n  dependencies: [i1.MatTable, i1.MatHeaderCellDef, i1.MatHeaderRowDef, i1.MatColumnDef, i1.MatCellDef, i1.MatRowDef, i1.MatHeaderCell, i1.MatCell, i1.MatHeaderRow, i1.MatRow, i2.MatButton],\n  styles: [\".next-round-button-container[_ngcontent-%COMP%] {\\n  margin-top: 10px;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9nYW1lZ3JpZC9nYW1lZ3JpZC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGdCQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtBQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLm5leHQtcm91bmQtYnV0dG9uLWNvbnRhaW5lciB7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["state","i0","GamegridComponent","constructor","ngOnInit","saveScore","event","index","target","value","addScoreToTotal","parseInt","id","score","gameState","currentPlayer","player","players","find","p","total","onNextRound","forEach","currentRound","orderedPlayers","sort","a","b","console","log","position","findIndex","name","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/colinvercruysse/Documents/vercruyssegameboard/vercruyssegameboard/src/app/components/gamegrid/gamegrid.component.ts","/Users/colinvercruysse/Documents/vercruyssegameboard/vercruyssegameboard/src/app/components/gamegrid/gamegrid.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { GameState } from 'src/app/data/interfaces';\nimport { state } from '../../data/dummy';\n\n@Component({\n  selector: 'app-gamegrid',\n  templateUrl: './gamegrid.component.html',\n  styleUrls: ['./gamegrid.component.scss']\n})\nexport class GamegridComponent implements OnInit {\n  public gameState: GameState = state;\n\n  displayedColumns: string[] = ['position','name', 'score', 'total'];\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  saveScore(event: any, index: number) {\n    if (event.target && event.target.value) {\n      this.addScoreToTotal(index,parseInt(event.target.value))\n    }\n  }\n\n  addScoreToTotal(id: number, score: number) {\n    let state = this.gameState;\n\n    state.currentPlayer = id;\n\n    let player = state.players.find(p => p.id === id);\n    if (player) {\n      player.score = score;\n      player.total = player.total + score;\n    }\n\n    this.gameState = state;\n  }\n\n  onNextRound() {\n    let state = this.gameState;\n\n    // Add round to each player\n    state.players.forEach(player => player.currentRound = player.currentRound + 1);\n\n    // Calculate positions\n    let orderedPlayers = state.players.sort((a, b) => {\n      if (a.total > b.total) return -1;\n      else if (a.total < b.total) return 1;\n      else return 0;\n    });\n\n    console.log(orderedPlayers);\n\n    state.players.forEach(player => player.position = orderedPlayers.findIndex(p => p.name === player.name));\n\n    ///console.log(state);\n\n    // Persist\n  }\n\n}\n","<h1>{{gameState.title}}</h1>\n<table mat-table [dataSource]=\"gameState.players\">\n  <!-- Position Column -->\n  <ng-container matColumnDef=\"position\">\n    <th mat-header-cell *matHeaderCellDef> No. </th>\n    <td mat-cell *matCellDef=\"let player\"> {{player.position + 1}} </td>\n  </ng-container>\n\n  <!-- Name Column -->\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef> Name </th>\n    <td mat-cell *matCellDef=\"let player\"> {{player.name}} </td>\n  </ng-container>\n\n  <!-- Score Column -->\n  <ng-container matColumnDef=\"score\">\n    <th mat-header-cell *matHeaderCellDef> Score </th>\n    <td mat-cell *matCellDef=\"let player; let i = index\"> \n      <input matInput type=\"number\" placeholder={{player.score}} value={{player.score}} (change)=\"saveScore($event, i)\">\n    </td>\n  </ng-container>\n\n  <!-- total Column -->\n  <ng-container matColumnDef=\"total\">\n    <th mat-header-cell *matHeaderCellDef> Total </th>\n    <td mat-cell *matCellDef=\"let player\"> {{player.total}}</td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n\n<div class=\"next-round-button-container\">\n  <button mat-raised-button color=\"primary\" (click)=\"onNextRound()\">Next round</button>\n</div>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}