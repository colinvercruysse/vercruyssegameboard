{"ast":null,"code":"/**\n * @license Angular v15.1.0\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ÉµparseCookieValue, XhrFactory as XhrFactory$1 } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, inject, Inject, PLATFORM_ID, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\n\nclass HttpHandler {}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\n\n\nclass HttpBackend {}\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\n\n\nclass HttpHeaders {\n  /**  Constructs a new HTTP header object with the given values.*/\n  constructor(headers) {\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     */\n    this.normalizedNames = new Map();\n    /**\n     * Queued updates to be materialized the next initialization.\n     */\n\n    this.lazyUpdate = null;\n\n    if (!headers) {\n      this.headers = new Map();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n\n            if (this.headers.has(key)) {\n              this.headers.get(key).push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = () => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          assertValidHeaders(headers);\n        }\n\n        this.headers = new Map();\n        Object.keys(headers).forEach(name => {\n          let values = headers[name];\n          const key = name.toLowerCase();\n\n          if (typeof values === 'string') {\n            values = [values];\n          }\n\n          if (values.length > 0) {\n            this.headers.set(key, values);\n            this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n\n\n  has(name) {\n    this.init();\n    return this.headers.has(name.toLowerCase());\n  }\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n\n\n  get(name) {\n    this.init();\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n\n\n  keys() {\n    this.init();\n    return Array.from(this.normalizedNames.values());\n  }\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n\n\n  getAll(name) {\n    this.init();\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the values.\n   * @param value The value to append.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n\n\n  append(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'a'\n    });\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or override for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n\n\n  set(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 's'\n    });\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n\n\n  delete(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'd'\n    });\n  }\n\n  maybeSetNormalizedName(name, lcName) {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  init() {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n\n      this.lazyInit = null;\n\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  copyFrom(other) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key));\n      this.normalizedNames.set(key, other.normalizedNames.get(key));\n    });\n  }\n\n  clone(update) {\n    const clone = new HttpHeaders();\n    clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  applyUpdate(update) {\n    const key = update.name.toLowerCase();\n\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value;\n\n        if (typeof value === 'string') {\n          value = [value];\n        }\n\n        if (value.length === 0) {\n          return;\n        }\n\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n\n      case 'd':\n        const toDelete = update.value;\n\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n\n          if (!existing) {\n            return;\n          }\n\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n\n        break;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  forEach(fn) {\n    this.init();\n    Array.from(this.normalizedNames.keys()).forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n  }\n\n}\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings or arrays. Throws an error if an invalid\n * header value is present.\n */\n\n\nfunction assertValidHeaders(headers) {\n  for (const [key, value] of Object.entries(headers)) {\n    if (typeof value !== 'string' && !Array.isArray(value)) {\n      throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` + `Expecting either a string or an array, but got: \\`${value}\\`.`);\n    }\n  }\n}\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\n\n\nclass HttpUrlEncodingCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key) {\n    return standardEncoding(key);\n  }\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n\n\n  encodeValue(value) {\n    return standardEncoding(value);\n  }\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n\n\n  decodeKey(key) {\n    return decodeURIComponent(key);\n  }\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n\n\n  decodeValue(value) {\n    return decodeURIComponent(value);\n  }\n\n}\n\nfunction paramParser(rawParams, codec) {\n  const map = new Map();\n\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    const params = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach(param => {\n      const eqIdx = param.indexOf('=');\n      const [key, val] = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n\n  return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\n\n\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/'\n};\n\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\n\nfunction valueToString(value) {\n  return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\n\n\nclass HttpParams {\n  constructor(options = {}) {\n    this.updates = null;\n    this.cloneFrom = null;\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = options.fromObject[key]; // convert the values to strings\n\n        const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n        this.map.set(key, values);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n\n\n  has(param) {\n    this.init();\n    return this.map.has(param);\n  }\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n\n\n  get(param) {\n    this.init();\n    const res = this.map.get(param);\n    return !!res ? res[0] : null;\n  }\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n\n\n  getAll(param) {\n    this.init();\n    return this.map.get(param) || null;\n  }\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n\n\n  keys() {\n    this.init();\n    return Array.from(this.map.keys());\n  }\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n\n\n  append(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'a'\n    });\n  }\n  /**\n   * Constructs a new body with appended values for the given parameter name.\n   * @param params parameters and values\n   * @return A new body with the new value.\n   */\n\n\n  appendAll(params) {\n    const updates = [];\n    Object.keys(params).forEach(param => {\n      const value = params[param];\n\n      if (Array.isArray(value)) {\n        value.forEach(_value => {\n          updates.push({\n            param,\n            value: _value,\n            op: 'a'\n          });\n        });\n      } else {\n        updates.push({\n          param,\n          value: value,\n          op: 'a'\n        });\n      }\n    });\n    return this.clone(updates);\n  }\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n\n\n  set(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 's'\n    });\n  }\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n\n\n  delete(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'd'\n    });\n  }\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n\n\n  toString() {\n    this.init();\n    return this.keys().map(key => {\n      const eKey = this.encoder.encodeKey(key); // `a: ['1']` produces `'a=1'`\n      // `b: []` produces `''`\n      // `c: ['1', '2']` produces `'c=1&c=2'`\n\n      return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value)).join('&');\n    }) // filter out empty values because `b: []` produces `''`\n    // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n    .filter(param => param !== '').join('&');\n  }\n\n  clone(update) {\n    const clone = new HttpParams({\n      encoder: this.encoder\n    });\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat(update);\n    return clone;\n  }\n\n  init() {\n    if (this.map === null) {\n      this.map = new Map();\n    }\n\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n      this.updates.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n            base.push(valueToString(update.value));\n            this.map.set(update.param, base);\n            break;\n\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map.get(update.param) || [];\n              const idx = base.indexOf(valueToString(update.value));\n\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n\n              if (base.length > 0) {\n                this.map.set(update.param, base);\n              } else {\n                this.map.delete(update.param);\n              }\n            } else {\n              this.map.delete(update.param);\n              break;\n            }\n\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n\n}\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\n\n\nclass HttpContextToken {\n  constructor(defaultValue) {\n    this.defaultValue = defaultValue;\n  }\n\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\n\n\nclass HttpContext {\n  constructor() {\n    this.map = new Map();\n  }\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n\n\n  set(token, value) {\n    this.map.set(token, value);\n    return this;\n  }\n  /**\n   * Retrieve the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns The stored value or default if one is defined.\n   */\n\n\n  get(token) {\n    if (!this.map.has(token)) {\n      this.map.set(token, token.defaultValue());\n    }\n\n    return this.map.get(token);\n  }\n  /**\n   * Delete the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n\n\n  delete(token) {\n    this.map.delete(token);\n    return this;\n  }\n  /**\n   * Checks for existence of a given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns True if the token exists, false otherwise.\n   */\n\n\n  has(token) {\n    return this.map.has(token);\n  }\n  /**\n   * @returns a list of tokens currently stored in the context.\n   */\n\n\n  keys() {\n    return this.map.keys();\n  }\n\n}\n/**\n * Determine whether the given HTTP method may include a body.\n */\n\n\nfunction mightHaveBody(method) {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n\n    default:\n      return true;\n  }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\n\n\nfunction isArrayBuffer(value) {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\n\n\nfunction isBlob(value) {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\n\n\nfunction isFormData(value) {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\n\n\nfunction isUrlSearchParams(value) {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\n\n\nclass HttpRequest {\n  constructor(method, url, third, fourth) {\n    this.url = url;\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     */\n\n    this.body = null;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     */\n\n    this.reportProgress = false;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     */\n\n    this.withCredentials = false;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     */\n\n    this.responseType = 'json';\n    this.method = method.toUpperCase(); // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n\n    let options; // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? third : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third;\n    } // If options have been passed, interpret them.\n\n\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials; // Override default response type of 'json' if one is provided.\n\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      } // Override headers if they're provided.\n\n\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.context) {\n        this.context = options.context;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    } // If no headers have been passed in, construct a new HttpHeaders instance.\n\n\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    } // If no context have been passed in, construct a new HttpContext instance.\n\n\n    if (!this.context) {\n      this.context = new HttpContext();\n    } // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n\n\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?'); // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n\n        const sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n\n\n  serializeBody() {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    } // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n\n\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || isUrlSearchParams(this.body) || typeof this.body === 'string') {\n      return this.body;\n    } // Check whether the body is an instance of HttpUrlEncodedParams.\n\n\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    } // Check whether the body is an object or array, and serialize with JSON if so.\n\n\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    } // Fall back on toString() for everything else.\n\n\n    return this.body.toString();\n  }\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n\n\n  detectContentTypeHeader() {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    } // FormData bodies rely on the browser's content type assignment.\n\n\n    if (isFormData(this.body)) {\n      return null;\n    } // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n\n\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    } // Array buffers have unknown contents and thus no type can be inferred.\n\n\n    if (isArrayBuffer(this.body)) {\n      return null;\n    } // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n\n\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    } // `HttpUrlEncodedParams` has its own content-type.\n\n\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    } // Arrays, objects, boolean and numbers will be encoded as JSON.\n\n\n    if (typeof this.body === 'object' || typeof this.body === 'number' || typeof this.body === 'boolean') {\n      return 'application/json';\n    } // No type could be inferred.\n\n\n    return null;\n  }\n\n  clone(update = {}) {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType; // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n\n    const body = update.body !== undefined ? update.body : this.body; // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n\n    const withCredentials = update.withCredentials !== undefined ? update.withCredentials : this.withCredentials;\n    const reportProgress = update.reportProgress !== undefined ? update.reportProgress : this.reportProgress; // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params; // Pass on context if needed\n\n    const context = update.context ?? this.context; // Check whether the caller has asked to add headers.\n\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers = Object.keys(update.setHeaders).reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n    } // Check whether the caller has asked to set params.\n\n\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams).reduce((params, param) => params.set(param, update.setParams[param]), params);\n    } // Finally, construct the new HttpRequest using the pieces from above.\n\n\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      context,\n      reportProgress,\n      responseType,\n      withCredentials\n    });\n  }\n\n}\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\n\n\nvar HttpEventType;\n\n(function (HttpEventType) {\n  /**\n   * The request was sent out over the wire.\n   */\n  HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n  /**\n   * An upload progress event was received.\n   */\n\n  HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n  /**\n   * The response status code and headers were received.\n   */\n\n  HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n  /**\n   * A download progress event was received.\n   */\n\n  HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n  /**\n   * The full response including the body was received.\n   */\n\n  HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n\n  HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\n\n\nclass HttpResponseBase {\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(init, defaultStatus = 200\n  /* HttpStatusCode.Ok */\n  , defaultStatusText = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null; // Cache the ok value to avoid defining a getter.\n\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\n\n\nclass HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(init = {}) {\n    super(init);\n    this.type = HttpEventType.ResponseHeader;\n  }\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n\n\n  clone(update = {}) {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\n\n\nclass HttpResponse extends HttpResponseBase {\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(init = {}) {\n    super(init);\n    this.type = HttpEventType.Response;\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  clone(update = {}) {\n    return new HttpResponse({\n      body: update.body !== undefined ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\n\n\nclass HttpErrorResponse extends HttpResponseBase {\n  constructor(init) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n    this.name = 'HttpErrorResponse';\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     */\n\n    this.ok = false; // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n    }\n\n    this.error = init.error || null;\n  }\n\n}\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\n\n\nfunction addBody(options, body) {\n  return {\n    body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials\n  };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\n\n\nclass HttpClient {\n  constructor(handler) {\n    this.handler = handler;\n  }\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n\n\n  request(first, url, options = {}) {\n    let req; // First, check whether the primary argument is an instance of `HttpRequest`.\n\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n      // Figure out the headers.\n      let headers = undefined;\n\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      } // Sort out parameters.\n\n\n      let params = undefined;\n\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({\n            fromObject: options.params\n          });\n        }\n      } // Construct the request.\n\n\n      req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {\n        headers,\n        context: options.context,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials\n      });\n    } // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n\n\n    const events$ = of(req).pipe(concatMap(req => this.handler.handle(req))); // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    } // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n\n\n    const res$ = events$.pipe(filter(event => event instanceof HttpResponse)); // Decide which stream to return.\n\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(map(res => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new Error('Response is not an ArrayBuffer.');\n              }\n\n              return res.body;\n            }));\n\n          case 'blob':\n            return res$.pipe(map(res => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new Error('Response is not a Blob.');\n              }\n\n              return res.body;\n            }));\n\n          case 'text':\n            return res$.pipe(map(res => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new Error('Response is not a string.');\n              }\n\n              return res.body;\n            }));\n\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map(res => res.body));\n        }\n\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n\n      default:\n        // Guard against new future observe types being added.\n        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `DELETE` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   */\n\n\n  delete(url, options = {}) {\n    return this.request('DELETE', url, options);\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `GET` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n\n\n  get(url, options = {}) {\n    return this.request('GET', url, options);\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `HEAD` request to execute on the server. The `HEAD` method returns\n   * meta information about the resource without transferring the\n   * resource itself. See the individual overloads for\n   * details on the return type.\n   */\n\n\n  head(url, options = {}) {\n    return this.request('HEAD', url, options);\n  }\n  /**\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\n   * `JSONP` to be dispatched via the interceptor pipeline.\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n   * API endpoints that don't support newer,\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n   * application making the request.\n   * The endpoint API must support JSONP callback for JSONP requests to work.\n   * The resource API returns the JSON response wrapped in a callback function.\n   * You can pass the callback function name as one of the query parameters.\n   * Note that JSONP requests can only be used with `GET` requests.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   */\n\n\n  jsonp(url, callbackParam) {\n    return this.request('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json'\n    });\n  }\n  /**\n   * Constructs an `Observable` that, when subscribed, causes the configured\n   * `OPTIONS` request to execute on the server. This method allows the client\n   * to determine the supported HTTP methods and other capabilities of an endpoint,\n   * without implying a resource action. See the individual overloads for\n   * details on the return type.\n   */\n\n\n  options(url, options = {}) {\n    return this.request('OPTIONS', url, options);\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PATCH` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n\n\n  patch(url, body, options = {}) {\n    return this.request('PATCH', url, addBody(options, body));\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `POST` request to execute on the server. The server responds with the location of\n   * the replaced resource. See the individual overloads for\n   * details on the return type.\n   */\n\n\n  post(url, body, options = {}) {\n    return this.request('POST', url, addBody(options, body));\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n   * with a new set of values.\n   * See the individual overloads for details on the return type.\n   */\n\n\n  put(url, body, options = {}) {\n    return this.request('PUT', url, addBody(options, body));\n  }\n\n}\n\nHttpClient.Éµfac = function HttpClient_Factory(t) {\n  return new (t || HttpClient)(i0.ÉµÉµinject(HttpHandler));\n};\n\nHttpClient.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpClient,\n  factory: HttpClient.Éµfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpClient, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpHandler\n    }];\n  }, null);\n})();\n\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n  return finalHandlerFn(req);\n}\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\n\n\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n  return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n    handle: downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)\n  });\n}\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\n\n\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n  // clang-format off\n  return (initialRequest, finalHandlerFn) => injector.runInContext(() => interceptorFn(initialRequest, downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn))); // clang-format on\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\n\n\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\n\nconst HTTP_INTERCEPTOR_FNS = new InjectionToken('HTTP_INTERCEPTOR_FNS');\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\n\nfunction legacyInterceptorFnFactory() {\n  let chain = null;\n  return (req, handler) => {\n    if (chain === null) {\n      const interceptors = inject(HTTP_INTERCEPTORS, {\n        optional: true\n      }) ?? []; // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n\n      chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n    }\n\n    return chain(req, handler);\n  };\n}\n\nclass HttpInterceptorHandler extends HttpHandler {\n  constructor(backend, injector) {\n    super();\n    this.backend = backend;\n    this.injector = injector;\n    this.chain = null;\n  }\n\n  handle(initialRequest) {\n    if (this.chain === null) {\n      const dedupedInterceptorFns = Array.from(new Set(this.injector.get(HTTP_INTERCEPTOR_FNS))); // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n\n      this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\n    }\n\n    return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest));\n  }\n\n}\n\nHttpInterceptorHandler.Éµfac = function HttpInterceptorHandler_Factory(t) {\n  return new (t || HttpInterceptorHandler)(i0.ÉµÉµinject(HttpBackend), i0.ÉµÉµinject(i0.EnvironmentInjector));\n};\n\nHttpInterceptorHandler.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpInterceptorHandler,\n  factory: HttpInterceptorHandler.Éµfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpInterceptorHandler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpBackend\n    }, {\n      type: i0.EnvironmentInjector\n    }];\n  }, null);\n})(); // Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n\n\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\n\nlet foreignDocument; // Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.'; // Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.'; // Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\n\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\n\nclass JsonpCallbackContext {}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\n\n\nfunction jsonpCallbackContext() {\n  if (typeof window === 'object') {\n    return window;\n  }\n\n  return {};\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\n\n\nclass JsonpClientBackend {\n  constructor(callbackMap, document) {\n    this.callbackMap = callbackMap;\n    this.document = document;\n    /**\n     * A resolved promise that can be used to schedule microtasks in the event handlers.\n     */\n\n    this.resolvedPromise = Promise.resolve();\n  }\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n\n\n  nextCallback() {\n    return `ng_jsonp_callback_${nextRequestId++}`;\n  }\n  /**\n   * Processes a JSONP request and returns an event stream of the results.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   *\n   */\n\n\n  handle(req) {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new Error(JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n    } // Check the request headers. JSONP doesn't support headers and\n    // cannot set any that were supplied.\n\n\n    if (req.headers.keys().length > 0) {\n      throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n    } // Everything else happens inside the Observable boundary.\n\n\n    return new Observable(observer => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const callback = this.nextCallback();\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`); // Construct the <script> tag and point it at the URL.\n\n      const node = this.document.createElement('script');\n      node.src = url; // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n      // The response object, if one has been received, or null otherwise.\n\n      let body = null; // Whether the response callback has been called.\n\n      let finished = false; // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n\n      this.callbackMap[callback] = data => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback]; // Set state to indicate data was received.\n\n        body = data;\n        finished = true;\n      }; // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n\n\n      const cleanup = () => {\n        // Remove the <script> tag if it's still on the page.\n        if (node.parentNode) {\n          node.parentNode.removeChild(node);\n        } // Remove the response callback from the callbackMap (window object in the\n        // browser).\n\n\n        delete this.callbackMap[callback];\n      }; // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n\n\n      const onLoad = event => {\n        // We wrap it in an extra Promise, to ensure the microtask\n        // is scheduled after the loaded endpoint has executed any potential microtask itself,\n        // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n        this.resolvedPromise.then(() => {\n          // Cleanup the page.\n          cleanup(); // Check whether the response callback has run.\n\n          if (!finished) {\n            // It hasn't, something went wrong with the request. Return an error via\n            // the Observable error path. All JSONP errors have status 0.\n            observer.error(new HttpErrorResponse({\n              url,\n              status: 0,\n              statusText: 'JSONP Error',\n              error: new Error(JSONP_ERR_NO_CALLBACK)\n            }));\n            return;\n          } // Success. body either contains the response body or null if none was\n          // returned.\n\n\n          observer.next(new HttpResponse({\n            body,\n            status: 200\n            /* HttpStatusCode.Ok */\n            ,\n            statusText: 'OK',\n            url\n          })); // Complete the stream, the response is over.\n\n          observer.complete();\n        });\n      }; // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n\n\n      const onError = error => {\n        cleanup(); // Wrap the error in a HttpErrorResponse.\n\n        observer.error(new HttpErrorResponse({\n          error,\n          status: 0,\n          statusText: 'JSONP Error',\n          url\n        }));\n      }; // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n\n\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node); // The request has now been successfully sent.\n\n      observer.next({\n        type: HttpEventType.Sent\n      }); // Cancellation handler.\n\n      return () => {\n        if (!finished) {\n          this.removeListeners(node);\n        } // And finally, clean up the page.\n\n\n        cleanup();\n      };\n    });\n  }\n\n  removeListeners(script) {\n    // Issue #34818\n    // Changing <script>'s ownerDocument will prevent it from execution.\n    // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n    if (!foreignDocument) {\n      foreignDocument = this.document.implementation.createHTMLDocument();\n    }\n\n    foreignDocument.adoptNode(script);\n  }\n\n}\n\nJsonpClientBackend.Éµfac = function JsonpClientBackend_Factory(t) {\n  return new (t || JsonpClientBackend)(i0.ÉµÉµinject(JsonpCallbackContext), i0.ÉµÉµinject(DOCUMENT));\n};\n\nJsonpClientBackend.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: JsonpClientBackend,\n  factory: JsonpClientBackend.Éµfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(JsonpClientBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: JsonpCallbackContext\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\n\n\nfunction jsonpInterceptorFn(req, next) {\n  if (req.method === 'JSONP') {\n    return inject(JsonpClientBackend).handle(req);\n  } // Fall through for normal HTTP requests.\n\n\n  return next(req);\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\n\n\nclass JsonpInterceptor {\n  constructor(injector) {\n    this.injector = injector;\n  }\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param initialRequest The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n\n\n  intercept(initialRequest, next) {\n    return this.injector.runInContext(() => jsonpInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n\n}\n\nJsonpInterceptor.Éµfac = function JsonpInterceptor_Factory(t) {\n  return new (t || JsonpInterceptor)(i0.ÉµÉµinject(i0.EnvironmentInjector));\n};\n\nJsonpInterceptor.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: JsonpInterceptor,\n  factory: JsonpInterceptor.Éµfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(JsonpInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.EnvironmentInjector\n    }];\n  }, null);\n})();\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\n\nfunction getResponseUrl(xhr) {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n\n  return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\n\n\nclass HttpXhrBackend {\n  constructor(xhrFactory) {\n    this.xhrFactory = xhrFactory;\n  }\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n\n\n  handle(req) {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\n    if (req.method === 'JSONP') {\n      throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n    } // Everything happens on Observable subscription.\n\n\n    return new Observable(observer => {\n      // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n      const xhr = this.xhrFactory.build();\n      xhr.open(req.method, req.urlWithParams);\n\n      if (!!req.withCredentials) {\n        xhr.withCredentials = true;\n      } // Add all the requested headers.\n\n\n      req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(','))); // Add an Accept header if one isn't present already.\n\n      if (!req.headers.has('Accept')) {\n        xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n      } // Auto-detect the Content-Type header if one isn't present already.\n\n\n      if (!req.headers.has('Content-Type')) {\n        const detectedType = req.detectContentTypeHeader(); // Sometimes Content-Type detection fails.\n\n        if (detectedType !== null) {\n          xhr.setRequestHeader('Content-Type', detectedType);\n        }\n      } // Set the responseType if one was requested.\n\n\n      if (req.responseType) {\n        const responseType = req.responseType.toLowerCase(); // JSON responses need to be processed as text. This is because if the server\n        // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n        // xhr.response will be null, and xhr.responseText cannot be accessed to\n        // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n        // is parsed by first requesting text and then applying JSON.parse.\n\n        xhr.responseType = responseType !== 'json' ? responseType : 'text';\n      } // Serialize the request body if one is present. If not, this will be set to null.\n\n\n      const reqBody = req.serializeBody(); // If progress events are enabled, response headers will be delivered\n      // in two events - the HttpHeaderResponse event and the full HttpResponse\n      // event. However, since response headers don't change in between these\n      // two events, it doesn't make sense to parse them twice. So headerResponse\n      // caches the data extracted from the response whenever it's first parsed,\n      // to ensure parsing isn't duplicated.\n\n      let headerResponse = null; // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n      // state, and memoizes it into headerResponse.\n\n      const partialFromXhr = () => {\n        if (headerResponse !== null) {\n          return headerResponse;\n        }\n\n        const statusText = xhr.statusText || 'OK'; // Parse headers from XMLHttpRequest - this step is lazy.\n\n        const headers = new HttpHeaders(xhr.getAllResponseHeaders()); // Read the response URL from the XMLHttpResponse instance and fall back on the\n        // request URL.\n\n        const url = getResponseUrl(xhr) || req.url; // Construct the HttpHeaderResponse and memoize it.\n\n        headerResponse = new HttpHeaderResponse({\n          headers,\n          status: xhr.status,\n          statusText,\n          url\n        });\n        return headerResponse;\n      }; // Next, a few closures are defined for the various events which XMLHttpRequest can\n      // emit. This allows them to be unregistered as event listeners later.\n      // First up is the load event, which represents a response being fully available.\n\n\n      const onLoad = () => {\n        // Read response state from the memoized partial data.\n        let {\n          headers,\n          status,\n          statusText,\n          url\n        } = partialFromXhr(); // The body will be read out if present.\n\n        let body = null;\n\n        if (status !== 204\n        /* HttpStatusCode.NoContent */\n        ) {\n          // Use XMLHttpRequest.response if set, responseText otherwise.\n          body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n        } // Normalize another potential bug (this one comes from CORS).\n\n\n        if (status === 0) {\n          status = !!body ? 200\n          /* HttpStatusCode.Ok */\n          : 0;\n        } // ok determines whether the response will be transmitted on the event or\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n        // but a successful status code can still result in an error if the user\n        // asked for JSON data and the body cannot be parsed as such.\n\n\n        let ok = status >= 200 && status < 300; // Check whether the body needs to be parsed as JSON (in many cases the browser\n        // will have done that already).\n\n        if (req.responseType === 'json' && typeof body === 'string') {\n          // Save the original body, before attempting XSSI prefix stripping.\n          const originalBody = body;\n          body = body.replace(XSSI_PREFIX, '');\n\n          try {\n            // Attempt the parse. If it fails, a parse error should be delivered to the user.\n            body = body !== '' ? JSON.parse(body) : null;\n          } catch (error) {\n            // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n            // JSON response. Restore the original body (including any XSSI prefix) to deliver\n            // a better error response.\n            body = originalBody; // If this was an error request to begin with, leave it as a string, it probably\n            // just isn't JSON. Otherwise, deliver the parsing error to the user.\n\n            if (ok) {\n              // Even though the response status was 2xx, this is still an error.\n              ok = false; // The parse error contains the text of the body that failed to parse.\n\n              body = {\n                error,\n                text: body\n              };\n            }\n          }\n        }\n\n        if (ok) {\n          // A successful response is delivered on the event stream.\n          observer.next(new HttpResponse({\n            body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined\n          })); // The full body has been received and delivered, no further events\n          // are possible. This request is complete.\n\n          observer.complete();\n        } else {\n          // An unsuccessful request is delivered on the error channel.\n          observer.error(new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined\n          }));\n        }\n      }; // The onError callback is called when something goes wrong at the network level.\n      // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n      // transmitted on the error channel.\n\n\n      const onError = error => {\n        const {\n          url\n        } = partialFromXhr();\n        const res = new HttpErrorResponse({\n          error,\n          status: xhr.status || 0,\n          statusText: xhr.statusText || 'Unknown Error',\n          url: url || undefined\n        });\n        observer.error(res);\n      }; // The sentHeaders flag tracks whether the HttpResponseHeaders event\n      // has been sent on the stream. This is necessary to track if progress\n      // is enabled since the event will be sent on only the first download\n      // progress event.\n\n\n      let sentHeaders = false; // The download progress event handler, which is only registered if\n      // progress events are enabled.\n\n      const onDownProgress = event => {\n        // Send the HttpResponseHeaders event if it hasn't been sent already.\n        if (!sentHeaders) {\n          observer.next(partialFromXhr());\n          sentHeaders = true;\n        } // Start building the download progress event to deliver on the response\n        // event stream.\n\n\n        let progressEvent = {\n          type: HttpEventType.DownloadProgress,\n          loaded: event.loaded\n        }; // Set the total number of bytes in the event if it's available.\n\n        if (event.lengthComputable) {\n          progressEvent.total = event.total;\n        } // If the request was for text content and a partial response is\n        // available on XMLHttpRequest, include it in the progress event\n        // to allow for streaming reads.\n\n\n        if (req.responseType === 'text' && !!xhr.responseText) {\n          progressEvent.partialText = xhr.responseText;\n        } // Finally, fire the event.\n\n\n        observer.next(progressEvent);\n      }; // The upload progress event handler, which is only registered if\n      // progress events are enabled.\n\n\n      const onUpProgress = event => {\n        // Upload progress events are simpler. Begin building the progress\n        // event.\n        let progress = {\n          type: HttpEventType.UploadProgress,\n          loaded: event.loaded\n        }; // If the total number of bytes being uploaded is available, include\n        // it.\n\n        if (event.lengthComputable) {\n          progress.total = event.total;\n        } // Send the event.\n\n\n        observer.next(progress);\n      }; // By default, register for load and error events.\n\n\n      xhr.addEventListener('load', onLoad);\n      xhr.addEventListener('error', onError);\n      xhr.addEventListener('timeout', onError);\n      xhr.addEventListener('abort', onError); // Progress events are only enabled if requested.\n\n      if (req.reportProgress) {\n        // Download progress is always enabled if requested.\n        xhr.addEventListener('progress', onDownProgress); // Upload progress depends on whether there is a body to upload.\n\n        if (reqBody !== null && xhr.upload) {\n          xhr.upload.addEventListener('progress', onUpProgress);\n        }\n      } // Fire the request, and notify the event stream that it was fired.\n\n\n      xhr.send(reqBody);\n      observer.next({\n        type: HttpEventType.Sent\n      }); // This is the return from the Observable function, which is the\n      // request cancellation handler.\n\n      return () => {\n        // On a cancellation, remove all registered event listeners.\n        xhr.removeEventListener('error', onError);\n        xhr.removeEventListener('abort', onError);\n        xhr.removeEventListener('load', onLoad);\n        xhr.removeEventListener('timeout', onError);\n\n        if (req.reportProgress) {\n          xhr.removeEventListener('progress', onDownProgress);\n\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.removeEventListener('progress', onUpProgress);\n          }\n        } // Finally, abort the in-flight request.\n\n\n        if (xhr.readyState !== xhr.DONE) {\n          xhr.abort();\n        }\n      };\n    });\n  }\n\n}\n\nHttpXhrBackend.Éµfac = function HttpXhrBackend_Factory(t) {\n  return new (t || HttpXhrBackend)(i0.ÉµÉµinject(i1.XhrFactory));\n};\n\nHttpXhrBackend.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpXhrBackend,\n  factory: HttpXhrBackend.Éµfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpXhrBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.XhrFactory\n    }];\n  }, null);\n})();\n\nconst XSRF_ENABLED = new InjectionToken('XSRF_ENABLED');\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_COOKIE_NAME\n});\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_HEADER_NAME\n});\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\n\nclass HttpXsrfTokenExtractor {}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n\n\nclass HttpXsrfCookieExtractor {\n  constructor(doc, platform, cookieName) {\n    this.doc = doc;\n    this.platform = platform;\n    this.cookieName = cookieName;\n    this.lastCookieString = '';\n    this.lastToken = null;\n    /**\n     * @internal for testing\n     */\n\n    this.parseCount = 0;\n  }\n\n  getToken() {\n    if (this.platform === 'server') {\n      return null;\n    }\n\n    const cookieString = this.doc.cookie || '';\n\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = ÉµparseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n\n    return this.lastToken;\n  }\n\n}\n\nHttpXsrfCookieExtractor.Éµfac = function HttpXsrfCookieExtractor_Factory(t) {\n  return new (t || HttpXsrfCookieExtractor)(i0.ÉµÉµinject(DOCUMENT), i0.ÉµÉµinject(PLATFORM_ID), i0.ÉµÉµinject(XSRF_COOKIE_NAME));\n};\n\nHttpXsrfCookieExtractor.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpXsrfCookieExtractor,\n  factory: HttpXsrfCookieExtractor.Éµfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpXsrfCookieExtractor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [XSRF_COOKIE_NAME]\n      }]\n    }];\n  }, null);\n})();\n\nfunction xsrfInterceptorFn(req, next) {\n  const lcUrl = req.url.toLowerCase(); // Skip both non-mutating requests and absolute URLs.\n  // Non-mutating requests don't require a token, and absolute URLs require special handling\n  // anyway as the cookie set\n  // on our origin is not the same as the token expected by another origin.\n\n  if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n    return next(req);\n  }\n\n  const token = inject(HttpXsrfTokenExtractor).getToken();\n  const headerName = inject(XSRF_HEADER_NAME); // Be careful not to overwrite an existing header of the same name.\n\n  if (token != null && !req.headers.has(headerName)) {\n    req = req.clone({\n      headers: req.headers.set(headerName, token)\n    });\n  }\n\n  return next(req);\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n\n\nclass HttpXsrfInterceptor {\n  constructor(injector) {\n    this.injector = injector;\n  }\n\n  intercept(initialRequest, next) {\n    return this.injector.runInContext(() => xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n\n}\n\nHttpXsrfInterceptor.Éµfac = function HttpXsrfInterceptor_Factory(t) {\n  return new (t || HttpXsrfInterceptor)(i0.ÉµÉµinject(i0.EnvironmentInjector));\n};\n\nHttpXsrfInterceptor.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpXsrfInterceptor,\n  factory: HttpXsrfInterceptor.Éµfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpXsrfInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.EnvironmentInjector\n    }];\n  }, null);\n})();\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\n\n\nvar HttpFeatureKind;\n\n(function (HttpFeatureKind) {\n  HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n  HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n  HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n  HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n  HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n  HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n})(HttpFeatureKind || (HttpFeatureKind = {}));\n\nfunction makeHttpFeature(kind, providers) {\n  return {\n    Éµkind: kind,\n    Éµproviders: providers\n  };\n}\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * @see withInterceptors\n * @see withInterceptorsFromDi\n * @see withXsrfConfiguration\n * @see withNoXsrfProtection\n * @see withJsonpSupport\n * @see withRequestsMadeViaParent\n */\n\n\nfunction provideHttpClient(...features) {\n  if (ngDevMode) {\n    const featureKinds = new Set(features.map(f => f.Éµkind));\n\n    if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) && featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n      throw new Error(ngDevMode ? `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` : '');\n    }\n  }\n\n  const providers = [HttpClient, HttpXhrBackend, HttpInterceptorHandler, {\n    provide: HttpHandler,\n    useExisting: HttpInterceptorHandler\n  }, {\n    provide: HttpBackend,\n    useExisting: HttpXhrBackend\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useValue: xsrfInterceptorFn,\n    multi: true\n  }, {\n    provide: XSRF_ENABLED,\n    useValue: true\n  }, {\n    provide: HttpXsrfTokenExtractor,\n    useClass: HttpXsrfCookieExtractor\n  }];\n\n  for (const feature of features) {\n    providers.push(...feature.Éµproviders);\n  }\n\n  return makeEnvironmentProviders(providers);\n}\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see HttpInterceptorFn\n * @see provideHttpClient\n * @publicApi\n */\n\n\nfunction withInterceptors(interceptorFns) {\n  return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n    return {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: interceptorFn,\n      multi: true\n    };\n  }));\n}\n\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken('LEGACY_INTERCEPTOR_FN');\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see HttpInterceptor\n * @see HTTP_INTERCEPTORS\n * @see provideHttpClient\n */\n\nfunction withInterceptorsFromDi() {\n  // Note: the legacy interceptor function is provided here via an intermediate token\n  // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n  // included multiple times, all of the multi-provider entries will have the same instance of the\n  // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n  // interceptors will not run multiple times.\n  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [{\n    provide: LEGACY_INTERCEPTOR_FN,\n    useFactory: legacyInterceptorFnFactory\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useExisting: LEGACY_INTERCEPTOR_FN,\n    multi: true\n  }]);\n}\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see provideHttpClient\n */\n\n\nfunction withXsrfConfiguration({\n  cookieName,\n  headerName\n}) {\n  const providers = [];\n\n  if (cookieName !== undefined) {\n    providers.push({\n      provide: XSRF_COOKIE_NAME,\n      useValue: cookieName\n    });\n  }\n\n  if (headerName !== undefined) {\n    providers.push({\n      provide: XSRF_HEADER_NAME,\n      useValue: headerName\n    });\n  }\n\n  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see provideHttpClient\n */\n\n\nfunction withNoXsrfProtection() {\n  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [{\n    provide: XSRF_ENABLED,\n    useValue: false\n  }]);\n}\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see provideHttpClient\n */\n\n\nfunction withJsonpSupport() {\n  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [JsonpClientBackend, {\n    provide: JsonpCallbackContext,\n    useFactory: jsonpCallbackContext\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useValue: jsonpInterceptorFn,\n    multi: true\n  }]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see provideHttpClient\n * @developerPreview\n */\n\n\nfunction withRequestsMadeViaParent() {\n  return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [{\n    provide: HttpBackend,\n    useFactory: () => {\n      const handlerFromParent = inject(HttpHandler, {\n        skipSelf: true,\n        optional: true\n      });\n\n      if (ngDevMode && handlerFromParent === null) {\n        throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n      }\n\n      return handlerFromParent;\n    }\n  }]);\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\n\n\nclass HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   */\n  static disable() {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [withNoXsrfProtection().Éµproviders]\n    };\n  }\n  /**\n   * Configure XSRF protection.\n   * @param options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   */\n\n\n  static withOptions(options = {}) {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: withXsrfConfiguration(options).Éµproviders\n    };\n  }\n\n}\n\nHttpClientXsrfModule.Éµfac = function HttpClientXsrfModule_Factory(t) {\n  return new (t || HttpClientXsrfModule)();\n};\n\nHttpClientXsrfModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n  type: HttpClientXsrfModule\n});\nHttpClientXsrfModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n  providers: [HttpXsrfInterceptor, {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpXsrfInterceptor,\n    multi: true\n  }, {\n    provide: HttpXsrfTokenExtractor,\n    useClass: HttpXsrfCookieExtractor\n  }, withXsrfConfiguration({\n    cookieName: XSRF_DEFAULT_COOKIE_NAME,\n    headerName: XSRF_DEFAULT_HEADER_NAME\n  }).Éµproviders, {\n    provide: XSRF_ENABLED,\n    useValue: true\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpClientXsrfModule, [{\n    type: NgModule,\n    args: [{\n      providers: [HttpXsrfInterceptor, {\n        provide: HTTP_INTERCEPTORS,\n        useExisting: HttpXsrfInterceptor,\n        multi: true\n      }, {\n        provide: HttpXsrfTokenExtractor,\n        useClass: HttpXsrfCookieExtractor\n      }, withXsrfConfiguration({\n        cookieName: XSRF_DEFAULT_COOKIE_NAME,\n        headerName: XSRF_DEFAULT_HEADER_NAME\n      }).Éµproviders, {\n        provide: XSRF_ENABLED,\n        useValue: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n\n\nclass HttpClientModule {}\n\nHttpClientModule.Éµfac = function HttpClientModule_Factory(t) {\n  return new (t || HttpClientModule)();\n};\n\nHttpClientModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n  type: HttpClientModule\n});\nHttpClientModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n  providers: [provideHttpClient(withInterceptorsFromDi(), withXsrfConfiguration({\n    cookieName: XSRF_DEFAULT_COOKIE_NAME,\n    headerName: XSRF_DEFAULT_HEADER_NAME\n  }))]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpClientModule, [{\n    type: NgModule,\n    args: [{\n      /**\n       * Configures the [dependency injector](guide/glossary#injector) where it is imported\n       * with supporting services for HTTP communications.\n       */\n      providers: [provideHttpClient(withInterceptorsFromDi(), withXsrfConfiguration({\n        cookieName: XSRF_DEFAULT_COOKIE_NAME,\n        headerName: XSRF_DEFAULT_HEADER_NAME\n      }))]\n    }]\n  }], null, null);\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\n\n\nclass HttpClientJsonpModule {}\n\nHttpClientJsonpModule.Éµfac = function HttpClientJsonpModule_Factory(t) {\n  return new (t || HttpClientJsonpModule)();\n};\n\nHttpClientJsonpModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n  type: HttpClientJsonpModule\n});\nHttpClientJsonpModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n  providers: [withJsonpSupport().Éµproviders]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpClientJsonpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [withJsonpSupport().Éµproviders]\n    }]\n  }], null, null);\n})();\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\n\n\nconst XhrFactory = XhrFactory$1; // This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, provideHttpClient, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HttpInterceptorHandler as ÉµHttpInterceptingHandler, HttpInterceptorHandler as ÉµHttpInterceptorHandler };","map":{"version":3,"names":["i1","DOCUMENT","ÉµparseCookieValue","XhrFactory","XhrFactory$1","i0","Injectable","InjectionToken","inject","Inject","PLATFORM_ID","makeEnvironmentProviders","NgModule","of","Observable","concatMap","filter","map","HttpHandler","HttpBackend","HttpHeaders","constructor","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","ngDevMode","assertValidHeaders","Object","keys","values","length","init","Array","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","fn","entries","isArray","Error","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","paramParser","rawParams","codec","params","replace","param","eqIdx","val","list","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","encodeURIComponent","s","t","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","res","appendAll","_value","toString","eKey","join","idx","splice","HttpContextToken","defaultValue","HttpContext","token","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","isUrlSearchParams","URLSearchParams","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","context","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","request","first","req","events$","pipe","handle","res$","event","head","jsonp","callbackParam","patch","post","put","Éµfac","Éµprov","interceptorChainEndFn","finalHandlerFn","adaptLegacyInterceptorToChain","chainTailFn","interceptor","initialRequest","intercept","downstreamRequest","chainedInterceptorFn","interceptorFn","injector","runInContext","HTTP_INTERCEPTORS","HTTP_INTERCEPTOR_FNS","legacyInterceptorFnFactory","chain","interceptors","optional","reduceRight","HttpInterceptorHandler","backend","dedupedInterceptorFns","Set","nextSequencedFn","EnvironmentInjector","nextRequestId","foreignDocument","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JSONP_ERR_HEADERS_NOT_SUPPORTED","JsonpCallbackContext","jsonpCallbackContext","window","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","nextCallback","observer","callback","node","createElement","src","finished","data","cleanup","parentNode","removeChild","onLoad","then","next","complete","onError","addEventListener","appendChild","Sent","removeListeners","script","implementation","createHTMLDocument","adoptNode","decorators","args","jsonpInterceptorFn","JsonpInterceptor","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","HttpXhrBackend","xhrFactory","build","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","removeEventListener","readyState","DONE","abort","XSRF_ENABLED","XSRF_DEFAULT_COOKIE_NAME","XSRF_COOKIE_NAME","providedIn","factory","XSRF_DEFAULT_HEADER_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","xsrfInterceptorFn","lcUrl","startsWith","headerName","HttpXsrfInterceptor","HttpFeatureKind","makeHttpFeature","kind","providers","Éµkind","Éµproviders","provideHttpClient","features","featureKinds","f","NoXsrfProtection","CustomXsrfConfiguration","provide","useExisting","useValue","multi","useClass","feature","withInterceptors","interceptorFns","Interceptors","LEGACY_INTERCEPTOR_FN","withInterceptorsFromDi","LegacyInterceptors","useFactory","withXsrfConfiguration","withNoXsrfProtection","withJsonpSupport","JsonpSupport","withRequestsMadeViaParent","RequestsMadeViaParent","handlerFromParent","skipSelf","HttpClientXsrfModule","disable","ngModule","withOptions","Éµmod","Éµinj","HttpClientModule","HttpClientJsonpModule","ÉµHttpInterceptingHandler","ÉµHttpInterceptorHandler"],"sources":["/Users/colinvercruysse/Documents/vercruyssegameboard/vercruyssegameboard/node_modules/@angular/common/fesm2020/http.mjs"],"sourcesContent":["/**\n * @license Angular v15.1.0\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ÉµparseCookieValue, XhrFactory as XhrFactory$1 } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, inject, Inject, PLATFORM_ID, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    assertValidHeaders(headers);\n                }\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    let values = headers[name];\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or override for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers) {\n    for (const [key, value] of Object.entries(headers)) {\n        if (typeof value !== 'string' && !Array.isArray(value)) {\n            throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` +\n                `Expecting either a string or an array, but got: \\`${value}\\`.`);\n        }\n    }\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n    '40': '@',\n    '3A': ':',\n    '24': '$',\n    '2C': ',',\n    '3B': ';',\n    '3D': '=',\n    '3F': '?',\n    '2F': '/',\n};\nfunction standardEncoding(v) {\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                // convert the values to strings\n                const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n                this.map.set(key, values);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n    has(token) {\n        return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.context) {\n                this.context = options.context;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no context have been passed in, construct a new HttpContext instance.\n        if (!this.context) {\n            this.context = new HttpContext();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = update.context ?? this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200 /* HttpStatusCode.Ok */, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpClient, deps: [{ token: HttpHandler }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpClient.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpClient });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpClient, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpHandler }]; } });\n\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n    return finalHandlerFn(req);\n}\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n    return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n        handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\n    });\n}\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n    // clang-format off\n    return (initialRequest, finalHandlerFn) => injector.runInContext(() => interceptorFn(initialRequest, downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)));\n    // clang-format on\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nconst HTTP_INTERCEPTOR_FNS = new InjectionToken('HTTP_INTERCEPTOR_FNS');\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nfunction legacyInterceptorFnFactory() {\n    let chain = null;\n    return (req, handler) => {\n        if (chain === null) {\n            const interceptors = inject(HTTP_INTERCEPTORS, { optional: true }) ?? [];\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n        }\n        return chain(req, handler);\n    };\n}\nclass HttpInterceptorHandler extends HttpHandler {\n    constructor(backend, injector) {\n        super();\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(initialRequest) {\n        if (this.chain === null) {\n            const dedupedInterceptorFns = Array.from(new Set(this.injector.get(HTTP_INTERCEPTOR_FNS)));\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\n        }\n        return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest));\n    }\n}\nHttpInterceptorHandler.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpInterceptorHandler, deps: [{ token: HttpBackend }, { token: i0.EnvironmentInjector }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpInterceptorHandler.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpInterceptorHandler });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpInterceptorHandler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpBackend }, { type: i0.EnvironmentInjector }]; } });\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Check the request headers. JSONP doesn't support headers and\n        // cannot set any that were supplied.\n        if (req.headers.keys().length > 0) {\n            throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200 /* HttpStatusCode.Ok */,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                if (!finished) {\n                    this.removeListeners(node);\n                }\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n    removeListeners(script) {\n        // Issue #34818\n        // Changing <script>'s ownerDocument will prevent it from execution.\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n        if (!foreignDocument) {\n            foreignDocument = this.document.implementation.createHTMLDocument();\n        }\n        foreignDocument.adoptNode(script);\n    }\n}\nJsonpClientBackend.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: JsonpClientBackend, deps: [{ token: JsonpCallbackContext }, { token: DOCUMENT }], target: i0.ÉµÉµFactoryTarget.Injectable });\nJsonpClientBackend.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: JsonpClientBackend });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: JsonpClientBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nfunction jsonpInterceptorFn(req, next) {\n    if (req.method === 'JSONP') {\n        return inject(JsonpClientBackend).handle(req);\n    }\n    // Fall through for normal HTTP requests.\n    return next(req);\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param initialRequest The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(initialRequest, next) {\n        return this.injector.runInContext(() => jsonpInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n}\nJsonpInterceptor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: JsonpInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ÉµÉµFactoryTarget.Injectable });\nJsonpInterceptor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: JsonpInterceptor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: JsonpInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204 /* HttpStatusCode.NoContent */) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 /* HttpStatusCode.Ok */ : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progress event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            xhr.addEventListener('timeout', onError);\n            xhr.addEventListener('abort', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('abort', onError);\n                xhr.removeEventListener('load', onLoad);\n                xhr.removeEventListener('timeout', onError);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpXhrBackend, deps: [{ token: i1.XhrFactory }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpXhrBackend.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpXhrBackend });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpXhrBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.XhrFactory }]; } });\n\nconst XSRF_ENABLED = new InjectionToken('XSRF_ENABLED');\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_COOKIE_NAME,\n});\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_HEADER_NAME,\n});\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ÉµparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpXsrfCookieExtractor, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: XSRF_COOKIE_NAME }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpXsrfCookieExtractor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpXsrfCookieExtractor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpXsrfCookieExtractor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [XSRF_COOKIE_NAME]\n                }] }]; } });\nfunction xsrfInterceptorFn(req, next) {\n    const lcUrl = req.url.toLowerCase();\n    // Skip both non-mutating requests and absolute URLs.\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\n    // anyway as the cookie set\n    // on our origin is not the same as the token expected by another origin.\n    if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' ||\n        lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n        return next(req);\n    }\n    const token = inject(HttpXsrfTokenExtractor).getToken();\n    const headerName = inject(XSRF_HEADER_NAME);\n    // Be careful not to overwrite an existing header of the same name.\n    if (token != null && !req.headers.has(headerName)) {\n        req = req.clone({ headers: req.headers.set(headerName, token) });\n    }\n    return next(req);\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    intercept(initialRequest, next) {\n        return this.injector.runInContext(() => xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n}\nHttpXsrfInterceptor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ÉµÉµFactoryTarget.Injectable });\nHttpXsrfInterceptor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpXsrfInterceptor });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nvar HttpFeatureKind;\n(function (HttpFeatureKind) {\n    HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n    HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n    HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n    HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n})(HttpFeatureKind || (HttpFeatureKind = {}));\nfunction makeHttpFeature(kind, providers) {\n    return {\n        Éµkind: kind,\n        Éµproviders: providers,\n    };\n}\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * @see withInterceptors\n * @see withInterceptorsFromDi\n * @see withXsrfConfiguration\n * @see withNoXsrfProtection\n * @see withJsonpSupport\n * @see withRequestsMadeViaParent\n */\nfunction provideHttpClient(...features) {\n    if (ngDevMode) {\n        const featureKinds = new Set(features.map(f => f.Éµkind));\n        if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n            featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n            throw new Error(ngDevMode ?\n                `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` :\n                '');\n        }\n    }\n    const providers = [\n        HttpClient,\n        HttpXhrBackend,\n        HttpInterceptorHandler,\n        { provide: HttpHandler, useExisting: HttpInterceptorHandler },\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: xsrfInterceptorFn,\n            multi: true,\n        },\n        { provide: XSRF_ENABLED, useValue: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n    ];\n    for (const feature of features) {\n        providers.push(...feature.Éµproviders);\n    }\n    return makeEnvironmentProviders(providers);\n}\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see HttpInterceptorFn\n * @see provideHttpClient\n * @publicApi\n */\nfunction withInterceptors(interceptorFns) {\n    return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n        return {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: interceptorFn,\n            multi: true,\n        };\n    }));\n}\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken('LEGACY_INTERCEPTOR_FN');\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see HttpInterceptor\n * @see HTTP_INTERCEPTORS\n * @see provideHttpClient\n */\nfunction withInterceptorsFromDi() {\n    // Note: the legacy interceptor function is provided here via an intermediate token\n    // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n    // included multiple times, all of the multi-provider entries will have the same instance of the\n    // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n    // interceptors will not run multiple times.\n    return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n        {\n            provide: LEGACY_INTERCEPTOR_FN,\n            useFactory: legacyInterceptorFnFactory,\n        },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useExisting: LEGACY_INTERCEPTOR_FN,\n            multi: true,\n        }\n    ]);\n}\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see provideHttpClient\n */\nfunction withXsrfConfiguration({ cookieName, headerName }) {\n    const providers = [];\n    if (cookieName !== undefined) {\n        providers.push({ provide: XSRF_COOKIE_NAME, useValue: cookieName });\n    }\n    if (headerName !== undefined) {\n        providers.push({ provide: XSRF_HEADER_NAME, useValue: headerName });\n    }\n    return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see provideHttpClient\n */\nfunction withNoXsrfProtection() {\n    return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n        {\n            provide: XSRF_ENABLED,\n            useValue: false,\n        },\n    ]);\n}\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see provideHttpClient\n */\nfunction withJsonpSupport() {\n    return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true },\n    ]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see provideHttpClient\n * @developerPreview\n */\nfunction withRequestsMadeViaParent() {\n    return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n        {\n            provide: HttpBackend,\n            useFactory: () => {\n                const handlerFromParent = inject(HttpHandler, { skipSelf: true, optional: true });\n                if (ngDevMode && handlerFromParent === null) {\n                    throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n                }\n                return handlerFromParent;\n            },\n        },\n    ]);\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                withNoXsrfProtection().Éµproviders,\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: withXsrfConfiguration(options).Éµproviders,\n        };\n    }\n}\nHttpClientXsrfModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpClientXsrfModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\nHttpClientXsrfModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpClientXsrfModule });\nHttpClientXsrfModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpClientXsrfModule, providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        withXsrfConfiguration({\n            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n            headerName: XSRF_DEFAULT_HEADER_NAME,\n        }).Éµproviders,\n        { provide: XSRF_ENABLED, useValue: true },\n    ] });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpClientXsrfModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        withXsrfConfiguration({\n                            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                            headerName: XSRF_DEFAULT_HEADER_NAME,\n                        }).Éµproviders,\n                        { provide: XSRF_ENABLED, useValue: true },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpClientModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\nHttpClientModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpClientModule });\nHttpClientModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpClientModule, providers: [\n        provideHttpClient(withInterceptorsFromDi(), withXsrfConfiguration({\n            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n            headerName: XSRF_DEFAULT_HEADER_NAME,\n        })),\n    ] });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpClientModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    /**\n                     * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                     * with supporting services for HTTP communications.\n                     */\n                    providers: [\n                        provideHttpClient(withInterceptorsFromDi(), withXsrfConfiguration({\n                            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                            headerName: XSRF_DEFAULT_HEADER_NAME,\n                        })),\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpClientJsonpModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\nHttpClientJsonpModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpClientJsonpModule });\nHttpClientJsonpModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpClientJsonpModule, providers: [\n        withJsonpSupport().Éµproviders,\n    ] });\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: HttpClientJsonpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        withJsonpSupport().Éµproviders,\n                    ],\n                }]\n        }] });\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nconst XhrFactory = XhrFactory$1;\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, provideHttpClient, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HttpInterceptorHandler as ÉµHttpInterceptingHandler, HttpInterceptorHandler as ÉµHttpInterceptorHandler };\n"],"mappings":"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ADG;IAEHzG,OAAO,EAAEyE,OAAO,CAACzE,OAFd;IAGH8G,OAAO,EAAErC,OAAO,CAACqC,OAHd;IAIH2B,OAAO,EAAEhE,OAAO,CAACgE,OAJd;IAKH9E,MAAM,EAAEc,OAAO,CAACd,MALb;IAMH+C,cAAc,EAAEjC,OAAO,CAACiC,cANrB;IAOHE,YAAY,EAAEnC,OAAO,CAACmC,YAPnB;IAQHD,eAAe,EAAElC,OAAO,CAACkC;EARtB,CAAP;AAUH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM+B,UAAN,CAAiB;EACb3I,WAAW,CAAC4I,OAAD,EAAU;IACjB,KAAKA,OAAL,GAAeA,OAAf;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIC,OAAO,CAACC,KAAD,EAAQvC,GAAR,EAAa7B,OAAO,GAAG,EAAvB,EAA2B;IAC9B,IAAIqE,GAAJ,CAD8B,CAE9B;;IACA,IAAID,KAAK,YAAYxC,WAArB,EAAkC;MAC9B;MACA;MACAyC,GAAG,GAAGD,KAAN;IACH,CAJD,MAKK;MACD;MACA;MACA;MACA;MACA,IAAI7I,OAAO,GAAG0C,SAAd;;MACA,IAAI+B,OAAO,CAACzE,OAAR,YAA2BF,WAA/B,EAA4C;QACxCE,OAAO,GAAGyE,OAAO,CAACzE,OAAlB;MACH,CAFD,MAGK;QACDA,OAAO,GAAG,IAAIF,WAAJ,CAAgB2E,OAAO,CAACzE,OAAxB,CAAV;MACH,CAXA,CAYD;;;MACA,IAAI2D,MAAM,GAAGjB,SAAb;;MACA,IAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}